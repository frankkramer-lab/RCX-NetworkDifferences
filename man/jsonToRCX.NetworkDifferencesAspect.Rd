% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json.R
\name{jsonToRCX.NetworkDifferencesAspect}
\alias{jsonToRCX.NetworkDifferencesAspect}
\title{Convert parsed JSON aspects to RCX}
\usage{
\method{jsonToRCX}{NetworkDifferencesAspect}(jsonData, verbose)
}
\arguments{
\item{jsonData}{nested list from parsed JSON}

\item{verbose}{logical; whether to print what is happening}
}
\value{
created aspect or \code{NULL}
}
\description{
Functions to handle parsed JSON for the \link{networkDifferences} aspect.
}
\details{
These functions will be used in \link[RCX:readCX]{RCX::processCX} to process the JSON data for every aspect.
Each aspect is accessible in the CX-JSON by a particular accession name (i.e. its aspect name; see NDEx documentation:
\url{https://home.ndexbio.org/data-model/}).
This name is used as class to handle different aspects by method dispatch.
This simplifies the extension of RCX for non-standard or self-defined aspects.

The CX-JSON is parsed to R data types using the \link{jsonlite} package as follows:

\code{jsonlite::fromJSON(cx, simplifyVector = FALSE)}

This results in a list of lists (of lists...) to avoid automatic data type conversions, which affect the correctness and
usability of the data. Simplified JSON data for example \link{NodeAttributes} would be coerced into a data.frame,
therefore the \code{value} column looses the format for data types other than \code{string}.

The \emph{jsonData} will be a list with only one element named by the aspect:
\verb{jsonData$<accessionName>}

To access the parsed data for example nodes, this can be done by \code{jsonData$nodes}.
The single aspects are then created using the corresponding \strong{create} functions and combined to an \link[RCX:createRCX]{RCX object}
object using the corresponding \strong{update} functions.
}
\seealso{
\link[RCX:rcxToJson]{RCX::rcxToJson}, \link[RCX:toCX]{RCX::toCX}, \link[RCX:readCX]{RCX::readCX}, \link[RCX:writeCX]{RCX::writeCX}
}
